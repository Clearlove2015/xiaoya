package wanghaisheng.com.xiaoya.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import wanghaisheng.com.xiaoya.db.StoryCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORY_COLLECTION".
*/
public class StoryCollectionDao extends AbstractDao<StoryCollection, Long> {

    public static final String TABLENAME = "STORY_COLLECTION";

    /**
     * Properties of entity StoryCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Images = new Property(4, String.class, "images", false, "IMAGES");
        public final static Property Body = new Property(5, String.class, "body", false, "BODY");
        public final static Property Css = new Property(6, String.class, "css", false, "CSS");
        public final static Property Theme_id = new Property(7, Integer.class, "theme_id", false, "THEME_ID");
        public final static Property Share_url = new Property(8, String.class, "share_url", false, "SHARE_URL");
    };


    public StoryCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public StoryCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORY_COLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"NAME\" TEXT," + // 2: name
                "\"IMAGE\" TEXT," + // 3: image
                "\"IMAGES\" TEXT," + // 4: images
                "\"BODY\" TEXT," + // 5: body
                "\"CSS\" TEXT," + // 6: css
                "\"THEME_ID\" INTEGER," + // 7: theme_id
                "\"SHARE_URL\" TEXT);"); // 8: share_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORY_COLLECTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoryCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(5, images);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(6, body);
        }
 
        String css = entity.getCss();
        if (css != null) {
            stmt.bindString(7, css);
        }
 
        Integer theme_id = entity.getTheme_id();
        if (theme_id != null) {
            stmt.bindLong(8, theme_id);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(9, share_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StoryCollection readEntity(Cursor cursor, int offset) {
        StoryCollection entity = new StoryCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // images
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // body
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // css
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // theme_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // share_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StoryCollection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImages(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBody(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCss(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTheme_id(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setShare_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StoryCollection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StoryCollection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
