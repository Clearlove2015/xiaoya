package wanghaisheng.com.xiaoya.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import wanghaisheng.com.xiaoya.db.MeituPicture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEITU_PICTURE".
*/
public class MeituPictureDao extends AbstractDao<MeituPicture, Long> {

    public static final String TABLENAME = "MEITU_PICTURE";

    /**
     * Properties of entity MeituPicture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImageId = new Property(1, String.class, "imageId", false, "IMAGE_ID");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property PicUrl = new Property(3, String.class, "picUrl", false, "PIC_URL");
        public final static Property PicPageurl = new Property(4, String.class, "picPageurl", false, "PIC_PAGEURL");
        public final static Property PicHeight = new Property(5, Integer.class, "picHeight", false, "PIC_HEIGHT");
        public final static Property PicWidth = new Property(6, Integer.class, "picWidth", false, "PIC_WIDTH");
        public final static Property PicSize = new Property(7, String.class, "picSize", false, "PIC_SIZE");
        public final static Property PicTitle = new Property(8, String.class, "picTitle", false, "PIC_TITLE");
        public final static Property PicDesc = new Property(9, String.class, "picDesc", false, "PIC_DESC");
        public final static Property InsTime = new Property(10, String.class, "insTime", false, "INS_TIME");
        public final static Property Index = new Property(11, Integer.class, "index", false, "INDEX");
        public final static Property ImgUrl = new Property(12, String.class, "imgUrl", false, "IMG_URL");
        public final static Property ImgThumbUrl = new Property(13, String.class, "imgThumbUrl", false, "IMG_THUMB_URL");
        public final static Property ImgThumbWidth = new Property(14, Integer.class, "imgThumbWidth", false, "IMG_THUMB_WIDTH");
        public final static Property ImgThumbHeight = new Property(15, Integer.class, "imgThumbHeight", false, "IMG_THUMB_HEIGHT");
        public final static Property DownUrl = new Property(16, String.class, "downUrl", false, "DOWN_URL");
    };


    public MeituPictureDao(DaoConfig config) {
        super(config);
    }
    
    public MeituPictureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEITU_PICTURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMAGE_ID\" TEXT," + // 1: imageId
                "\"GROUP_ID\" TEXT," + // 2: groupId
                "\"PIC_URL\" TEXT," + // 3: picUrl
                "\"PIC_PAGEURL\" TEXT," + // 4: picPageurl
                "\"PIC_HEIGHT\" INTEGER," + // 5: picHeight
                "\"PIC_WIDTH\" INTEGER," + // 6: picWidth
                "\"PIC_SIZE\" TEXT," + // 7: picSize
                "\"PIC_TITLE\" TEXT," + // 8: picTitle
                "\"PIC_DESC\" TEXT," + // 9: picDesc
                "\"INS_TIME\" TEXT," + // 10: insTime
                "\"INDEX\" INTEGER," + // 11: index
                "\"IMG_URL\" TEXT," + // 12: imgUrl
                "\"IMG_THUMB_URL\" TEXT," + // 13: imgThumbUrl
                "\"IMG_THUMB_WIDTH\" INTEGER," + // 14: imgThumbWidth
                "\"IMG_THUMB_HEIGHT\" INTEGER," + // 15: imgThumbHeight
                "\"DOWN_URL\" TEXT);"); // 16: downUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEITU_PICTURE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MeituPicture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imageId = entity.getImageId();
        if (imageId != null) {
            stmt.bindString(2, imageId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(4, picUrl);
        }
 
        String picPageurl = entity.getPicPageurl();
        if (picPageurl != null) {
            stmt.bindString(5, picPageurl);
        }
 
        Integer picHeight = entity.getPicHeight();
        if (picHeight != null) {
            stmt.bindLong(6, picHeight);
        }
 
        Integer picWidth = entity.getPicWidth();
        if (picWidth != null) {
            stmt.bindLong(7, picWidth);
        }
 
        String picSize = entity.getPicSize();
        if (picSize != null) {
            stmt.bindString(8, picSize);
        }
 
        String picTitle = entity.getPicTitle();
        if (picTitle != null) {
            stmt.bindString(9, picTitle);
        }
 
        String picDesc = entity.getPicDesc();
        if (picDesc != null) {
            stmt.bindString(10, picDesc);
        }
 
        String insTime = entity.getInsTime();
        if (insTime != null) {
            stmt.bindString(11, insTime);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(12, index);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(13, imgUrl);
        }
 
        String imgThumbUrl = entity.getImgThumbUrl();
        if (imgThumbUrl != null) {
            stmt.bindString(14, imgThumbUrl);
        }
 
        Integer imgThumbWidth = entity.getImgThumbWidth();
        if (imgThumbWidth != null) {
            stmt.bindLong(15, imgThumbWidth);
        }
 
        Integer imgThumbHeight = entity.getImgThumbHeight();
        if (imgThumbHeight != null) {
            stmt.bindLong(16, imgThumbHeight);
        }
 
        String downUrl = entity.getDownUrl();
        if (downUrl != null) {
            stmt.bindString(17, downUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MeituPicture readEntity(Cursor cursor, int offset) {
        MeituPicture entity = new MeituPicture( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // picPageurl
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // picHeight
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // picWidth
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picSize
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // picTitle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // picDesc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // insTime
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // index
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imgUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // imgThumbUrl
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // imgThumbWidth
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // imgThumbHeight
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // downUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MeituPicture entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPicPageurl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPicHeight(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPicWidth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPicSize(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPicTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInsTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIndex(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setImgUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImgThumbUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImgThumbWidth(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setImgThumbHeight(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setDownUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MeituPicture entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MeituPicture entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
